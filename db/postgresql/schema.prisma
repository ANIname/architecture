generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "rhel-openssl-1.0.x"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String  @id @default(uuid())
  discordId String? @unique

  games Game[]

  isBot Boolean @default(false)

  gender UserGender @default(preferNotToSay)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotContextMenuCommand {
  id String @id @default(uuid())

  name               String
  name_localizations DiscordBotContextMenuCommandNameLocalization?

  default_member_permissions String
  dm_permission              Boolean @default(false)

  type Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotContextMenuCommandNameLocalization {
  id        String @id @default(uuid())
  commandId String @unique

  uk String
  ru String

  command DiscordBotContextMenuCommand @relation(fields: [commandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommand {
  id String @id @default(uuid())

  name               String
  name_localizations DiscordBotSlashCommandNameLocalization?

  description               String
  description_localizations DiscordBotSlashCommandDescriptionLocalization?

  default_member_permissions String
  dm_permission              Boolean @default(false)
  nsfw                       Boolean @default(false)

  options DiscordBotSlashCommandOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandOption {
  id        String @id @default(uuid())
  commandId String

  name               String
  name_localizations DiscordBotSlashCommandOptionNameLocalization?

  description               String
  description_localizations DiscordBotSlashCommandOptionDescriptionLocalization?

  type         Int
  required     Boolean @default(false)
  autocomplete Boolean @default(false)

  max_value Int?
  min_value Int?

  max_length Int?
  min_length Int?

  choices DiscordBotSlashCommandOptionChoice[]
  command DiscordBotSlashCommand @relation(fields: [commandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandOptionChoice {
  id              String @id @default(uuid())
  commandOptionId String

  name                String
  name_loacalizations DiscordBotSlashCommandOptionChoiceNameLocalization?

  value String

  commandOption DiscordBotSlashCommandOption @relation(fields: [commandOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandOptionChoiceNameLocalization {
  id                    String @id @default(uuid())
  commandOptionChoiceId String @unique

  uk String
  ru String

  commandOptionChoice DiscordBotSlashCommandOptionChoice @relation(fields: [commandOptionChoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandOptionNameLocalization {
  id              String @id @default(uuid())
  commandOptionId String @unique

  uk String
  ru String

  commandOption DiscordBotSlashCommandOption @relation(fields: [commandOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandOptionDescriptionLocalization {
  id              String @id @default(uuid())
  commandOptionId String @unique

  uk String
  ru String

  commandOption DiscordBotSlashCommandOption @relation(fields: [commandOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandNameLocalization {
  id        String @id @default(uuid())
  commandId String @unique

  uk String
  ru String

  command DiscordBotSlashCommand @relation(fields: [commandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model DiscordBotSlashCommandDescriptionLocalization {
  id        String @id @default(uuid())
  commandId String @unique

  uk String
  ru String

  command DiscordBotSlashCommand @relation(fields: [commandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model Game {
  id     String  @id @default(uuid())
  userId String
  title  GameName

  gonnaBeLucky      GameGonnaBeLucky?
  rockPaperScissors GameRockPaperScissors?
  discordGuild      GameDiscordGuild?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  @@unique([userId, title])
}

model GameGonnaBeLucky {
  id     String  @id @default(uuid())
  gameId String @unique

  points Int

  events GameGonnaBeLuckyEvent[]
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model GameGonnaBeLuckyEvent {
  id                 String  @id @default(uuid())
  gameGonnaBeLuckyId String

  data        String
  declination String

  points   Int

  gonnaBeLucky GameGonnaBeLucky @relation(fields: [gameGonnaBeLuckyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model GameRockPaperScissors {
  id     String  @id @default(uuid())
  gameId String @unique

  points Int

  events GameRockPaperScissorsEvent[]
  game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model GameRockPaperScissorsEvent {
  id                      String  @id @default(uuid())
  gameRockPaperScissorsId String
  winnersIds              String[]
  losersIds               String[]

  choice GameRockPaperScissorsChoice
  status GameRockPaperScissorsEventStatus

  points Int

  rockPaperScissors GameRockPaperScissors @relation(fields: [gameRockPaperScissorsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model GameDiscordGuild {
  id     String  @id @default(uuid())
  gameId String @unique

  points Int

  events GameDiscordGuildEvent[]
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model GameDiscordGuildEvent {
  id                 String  @id @default(uuid())
  gameDiscordGuildId String

  reason String

  points   Int

  discordGuild GameDiscordGuild @relation(fields: [gameDiscordGuildId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?

}

enum GameName {
  gonnaBeLucky
  rockPaperScissors
  discordGuild
}

enum GameRockPaperScissorsChoice {
  rock
  paper
  scissors
}

enum GameRockPaperScissorsEventStatus {
  win
  lose
  draw
}

enum UserGender {
  male
  female
  other
  preferNotToSay
}
